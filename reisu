#!/bin/bash
nsp_path="/storage/emulated/0/termux"
mkdir -p "/storage/emulated/0/termux"

rm -rf "${HOME}/.switch"
mkdir -p "${HOME}/.switch"
cp "${nsp_path}/prod.keys" "${HOME}/.switch/"
touch "${HOME}/.switch/title.keys"


clear
cd "${nsp_path}"

echo "Rei's Switch_Updater v1.0"
# Base & Update NSP's setup
set -- *.nsp

while true; do
    i=0
    for pathname do
        i=$(( i + 1 ))
        printf '%d) %s\n' "$i" "$pathname" >&2
    done

    printf 'Select base nsp file, or 0 to exit: ' >&2
    read -r reply

    number=$(printf '%s\n' "$reply" | tr -dc '[:digit:]')

    if [ "$number" = "0" ]; then
	clear
        echo 'cancelled' >&2
        exit
    elif [ "$number" -gt "$#" ]; then
        echo 'bad choice' >&2
    else
        break
    fi
done

shift "$(( number - 1 ))"
basensp=$1
set -- *.nsp

while true; do
    i=0
    for pathname do
        i=$(( i + 1 ))
        printf '%d) %s\n' "$i" "$pathname" >&2
    done

    printf 'Select update nsp file, or 0 to exit: ' >&2
    read -r reply

    number=$(printf '%s\n' "$reply" | tr -dc '[:digit:]')

    if [ "$number" = "0" ]; then
        echo 'owo' >&2
        exit
    elif [ "$number" -gt "$#" ]; then
        echo 'bad choice' >&2
    else
        break
    fi
done

shift "$(( number - 1 ))"
updatensp=$1

cd ${HOME}


mkdir temp hactool_out
cd hactool_out

# derive title keys!

derivekey () {
	title=$(xxd *.tik | grep -oP -m 1 "(?<=2a0: ).{39}" | sed 's/ //g')
	key=$(xxd *.tik | grep -oP -m 1 "(?<=180: ).{39}" | sed 's/ //g')
	echo $title=$key >> "${HOME}/.switch/title.keys"
}

hactool -t pfs0 "$nsp_path/$updatensp" --outdir . 
derivekey
updatenca=""
basenca=""
controlnca=""
for i in *.nca
do
	type=$(hactool $i | grep -oP "(?<=Content Type:\s{23}).*")
	patch=$(hactool $i | grep -oP "Patch")

    if [ "$type" == "Program" ] && [ "$patch" == "Patch" ] && [ "$updatenca" == "" ]; then
		updatenca=$i
		mv $i "../temp"
	elif [ "$type" == "Control" ] && [ "$controlnca" == "" ]; then
		controlnca=$i
		mv $i "../temp"
	fi
done
rm *.tik
hactool -t pfs0 "$nsp_path/$basensp" --outdir . 
derivekey

echo "Done with NSP's"
clear

for i in *.nca
do
	type=$(hactool $i | grep -oP "(?<=Content Type:\s{23}).*")
	patch=$(hactool $i | grep -oP "Patch")

    if [ "$type" == "Program" ] && [ "$patch" == "" ] && [ "$basenca" == "" ]; then
		basenca=$i
		mv $i "../temp"
	elif [ "$type" == "Control" ] && [ "$controlnca" == "" ]; then
		controlnca=$i
		mv $i "../temp"
	fi
done

# extract update NSP and move program & control NCAs to temp dir

cd ..
rm -rf hactool_out

cd temp

# parse Title ID from base program NCA
titleid=$(hactool $basenca | grep -oP "(?<=Title ID:\s{27}).*")

# extract base and update NCAs into romfs end exefs
mkdir exefs romfs
hac2l --basenca="$basenca" $updatenca --romfsdir="romfs" --exefsdir="exefs" 
rm $basenca $updatenca

# pack romfs and exefs into one NCA
mkdir nca
hacpack --type="nca" --ncatype="program" --plaintext --exefsdir="exefs" --romfsdir="romfs" --titleid="$titleid" --outdir="nca"
patchednca=$(ls nca)
mv $controlnca nca
rm -rf exefs romfs

# generate meta NCA from patched NCA and control NCA
hacpack --type="nca" --ncatype="meta" --titletype="application" --programnca="nca/$patchednca" --controlnca="nca/$controlnca" --titleid="$titleid" --outdir="nca"

# pack all three NCAs into an NSP
mkdir nsp
mkdir -p "$nsp_path/patched"
hacpack --type="nsp" --ncadir="nca" --titleid="$titleid" --outdir="$nsp_path/patched"

cd
rm -rf "temp"

